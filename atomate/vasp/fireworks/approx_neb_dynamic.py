from fireworks import Firework
from atomate.vasp.firetasks.approx_neb_tasks import (
    PathfinderToDb,
    AddSelectiveDynamics,
)
from atomate.vasp.firetasks.approx_neb_dynamic_tasks import GetImageFireworks
from atomate.vasp.config import VASP_CMD, DB_FILE

class EvaluatePathFW(Firework):
    def __init__(
        self,
        approx_neb_wf_uuid,
        stable_sites_combo,
        mobile_specie,
        n_images,
        selective_dynamics_scheme,
        launch_mode = "all",
        name="evaluate path",
        db_file=DB_FILE,
        vasp_input_set=None,
        vasp_cmd=VASP_CMD,
        override_default_vasp_params=None,
        handler_group=None,
        parents=None,
        add_additional_fields=None,
        add_tags=None,
        **kwargs
    ):
        """
        #ToDo: Update description
        Applies NEBPathFinder (from pymatgen.analysis.path_finder) using the
        host lattice (chgcar from the task_id stored) and output structures stored
        in the stable_sites field of the approx_neb collection. Resulting
        structures or images (interpolated between stable_site structures or end
        point structures) are stored in the "images" field of the approx_neb
        collection for future use.
        Prepares input structures for image relaxations by applying selective
        dynamics to the structures generated by Pathfinder. Input structures
        are stored in the approx_neb collection for use in future calculations.
        Note see AddSelectiveDynamics Firetask for more information on the input,
        selective_dynamics_scheme.
        Launches fireworks for image relaxations using the specified launch_mode.
        The provided approx_neb_wf_uuid specifies the set of inputs to use.

        Args:
            approx_neb_wf_uuid (str): Unique identifier for approx workflow record
                keeping.
            stable_sites_combo (str): string must have format of "0+1",
                "0+2", etc. to specify which combination of stable_sites to use for
                path interpolation for cases with multiple stable sites
            mobile_specie (str): specie of site of interest such as the working ion
                (e.g. "Li" if the working ion of interest is a Li). Provided  to
                perform a built in check on the structures pulled the approx_neb doc.
            n_images (int): number of images interpolated between end point structures
            selective_dynamics_scheme (str): "fix_two_atom"
            name (str): Combined with mobile_specie and stable_sites_combo to label the firework
            vasp_input_set (VaspInputSet): input set to use. Defaults to
                MPRelaxSet() if None.
            override_default_vasp_params (dict): If this is not None, these params
                are passed to the default vasp_input_set, i.e., MPRelaxSet. This
                allows one to easily override some settings (e.g.
                user_incar_settings, etc.)
            handler_group (str or [ErrorHandler]): group of handlers to use for
                RunVaspCustodian firetask. See handler_groups dict in the code for
                the groups and complete list of handlers in each group. Alternatively,
                you can specify a list of ErrorHandler objects.
            vasp_cmd (str): Command to run vasp.
            db_file (str): Path to file specifying db credentials to store outputs.
            job_type (str): custodian job type (default "double_relaxation_run")

            parents ([Firework]): Parents of this particular Firework.
            \*\*kwargs: Other kwargs that are passed to Firework.__init__.
        """
        fw_name = name + ": " + mobile_specie + " " + stable_sites_combo
        self.spec["tags"] = ["approx_neb", approx_neb_wf_uuid, "evaluate_path"]

        t = []
        # apply pathfinder pymatgen function and store outputs in approx_neb collection
        t.append(
            PathfinderToDb(
                db_file=db_file,
                n_images=n_images,
                stable_sites_combo=stable_sites_combo,
                approx_neb_wf_uuid=approx_neb_wf_uuid,
            )
        )
        # apply selective dynamics to pathfinder outputs to get images input structures
        t.append(
            AddSelectiveDynamics(
                approx_neb_wf_uuid=approx_neb_wf_uuid,
                pathfinder_key=stable_sites_combo,
                mobile_specie=mobile_specie,
                selective_dynamics_scheme=selective_dynamics_scheme,
                db_file=db_file,
            )
        )
        # add dynamic firetask that will launch image relaxations as desired
        t.append(
            GetImageFireworks(
                launch_mode=launch_mode,
                images_key=stable_sites_combo,
                approx_neb_wf_uuid=approx_neb_wf_uuid,
                vasp_cmd=vasp_cmd,
                db_file=db_file,
                vasp_input_set=vasp_input_set,
                override_default_vasp_params=override_default_vasp_params,
                handler_group=handler_group,
                add_additional_fields=add_additional_fields,
                add_tags=add_tags
            )
        )

        super().__init__(tasks=t, name=fw_name, parents=parents, **kwargs)